# This workflow installs Apama Community Edition and uses it to run PySys tests for your application

# Python 3 and Java JDK 8 are shipped with Apama (and added to PATH by this workflow) so there is no need to install them separately. 

# Using this workflow implies that you have agreed to the terms of the Software AG license agreement - see http://www.apamacommunity.com/terms-conditions/
# This workflow can be used without a commercial license of Apama. If you do have a commercial Apama license you hereby 
# agree not to commit the license file to any repository or location that can be accessed outside your organization. 

name: PySys

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    env:
      # Keep this updated with the latest version from http://www.apamacommunity.com/downloads/
      WORKFLOW_APAMA_VERSION: 10.5.3.2

    strategy:
      # Disable fail fast since it's useful to see test results for all platforms even if some failed
      fail-fast: false
      
      matrix:
        include:
          #- run-id: amd64_linux
          #  os: ubuntu-latest
          #  upload-docs: true
            
          - run-id: amd64_win
            os: windows-latest
            
    runs-on: ${{matrix.os}}
    
    steps:
      # Install the full Apama Community Edition. This contains useful tools such as apamadoc/apama_project 
      # which are not in the smaller "core" package

      - uses: actions/checkout@v2

      - name: Apama installation cache
        # This fork of actions/cache allows cache to be saved even if some later steps (e.g. testing) fail
        uses: pat-s/always-upload-cache@v2.1.0
        id: cache-apama-installer
        with:
            # Would prefer to put this in ~/ but doesn't work on Windows currently due to https://github.com/actions/cache/issues/456
            path: ${{ github.workspace }}/cached-apama-installation.tar
            # To use a clean cache, add extra chars to this key
            key: apama-${{ matrix.run-id }}-${{ env.WORKFLOW_APAMA_VERSION }}-TODOxx1

      - name: Install Apama
        shell: bash
        run: |
          APAMA_CACHE_TAR=`pwd`/cached-apama-installation.tar
          echo Cache location: $APAMA_CACHE_TAR
          ls

          if [[ ${{runner.os}} = Windows ]]; then
            _SAG_INSTALL_PATH=c:\\SoftwareAG
          else
            _SAG_INSTALL_PATH=/opt/softwareag
          fi
          
          if [[ "${{ steps.cache-apama-installer.outputs.cache-hit }}" = "true" ]]; then
            echo Unpacking Apama installation from cache
            
            mkdir $_SAG_INSTALL_PATH
            cd $_SAG_INSTALL_PATH
            tar -xf $APAMA_CACHE_TAR

            # Check it unpacked correctly
            ls $_SAG_INSTALL_PATH/Apama > /dev/null
          else
            # Cache miss - need to install it
            
            mkdir --parents $_SAG_INSTALL_PATH/Apama/bin
            echo Hello > $_SAG_INSTALL_PATH/Apama/bin/myprogram.txt
            
            # Double-check that it was installed
            ls $_SAG_INSTALL_PATH/Apama/bin > /dev/null
            
            # Archive a pristine copy of the installation for the cache (before running any tests); 
            # no need to compress as the cache already does that
            cd $_SAG_INSTALL_PATH
            tar -cf $APAMA_CACHE_TAR *
            
            echo TODO - contents of ~ are:
            ls ~
            echo ---
          fi

          cd ~

