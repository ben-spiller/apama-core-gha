# Demonstrate cache doesn't work on Windows   

name: CacheDemo

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    env:
      WORKFLOW_APAMA_VERSION: 10.5.3.2

    strategy:
      # Disable fail fast since it's useful to see test results for all platforms even if some failed
      fail-fast: false
      
      matrix:
        include:
          #- run-id: amd64_linux
          #  os: ubuntu-latest
          #  upload-docs: true
            
          - run-id: amd64_win
            os: windows-latest
            
    runs-on: ${{matrix.os}}
    
    steps:
      - uses: actions/checkout@v2
 
      - name: Apama installation cache
        uses: actions/cache@v2.1.3
        id: cache-apama-installer
        with:
            # Would prefer to put this in ~/ but doesn't work on Windows currently due to https://github.com/actions/cache/issues/456
            path: ${{ github.workspace }}/cached-apama-installation.tar
            # To use a clean cache, add extra chars to this key
            key: mykey-${{ matrix.run-id }}-TODO.05

      #- name: OTHER cache
      #  # This fork of actions/cache allows cache to be saved even if some later steps (e.g. testing) fail
      #  #uses: pat-s/always-upload-cache@v2.1.3
      #  uses: actions/cache@v2.1.3
      #  id: cache-apama-installer-foo
      #  with:
      #      # Would prefer to put this in ~/ but doesn't work on Windows currently due to https://github.com/actions/cache/issues/456
      #      path: ${{ github.workspace }}/cached-apama-installation.foo
      #      # To use a clean cache, add extra chars to this key
      #      key: apama-${{ matrix.run-id }}-${{ env.WORKFLOW_APAMA_VERSION }}-TODOy16

      - name: Download Apama
        uses: carlosperate/download-file-action@v1.0.3
        id: download-apama
        if: steps.cache-apama-installer.outputs.cache-hit != 'true'
        with:
           file-url: 'https://downloads.apamacommunity.com/apama/${{ env.WORKFLOW_APAMA_VERSION }}/apama_${{ env.WORKFLOW_APAMA_VERSION }}_${{ matrix.run-id }}.zip'
           file-name: apama-installer.zip
           location: ../apama-installer

      - name: Install Apama
        shell: bash
        run: |
        
          APAMA_CACHE_TAR=`pwd`/cached-apama-installation.tar
          echo Cache location: $APAMA_CACHE_TAR

          if [[ ${{runner.os}} = Windows ]]; then
            _SAG_INSTALL_PATH=c:\\SoftwareAG
          else
            _SAG_INSTALL_PATH=/opt/softwareag
          fi
          
          if [[ "${{ steps.cache-apama-installer.outputs.cache-hit }}" = "true" ]]; then
            echo Unpacking Apama installation from cache
            
            mkdir $_SAG_INSTALL_PATH
            cd $_SAG_INSTALL_PATH
            tar -xf $APAMA_CACHE_TAR

            # Check it unpacked correctly
            ls $_SAG_INSTALL_PATH/Apama > /dev/null
          else
            # Cache miss - need to install it
            #mkdir --parents $_SAG_INSTALL_PATH/Apama/bin
            #echo Hello > $_SAG_INSTALL_PATH/Apama/bin/myprogram.txt
            
            
            cd ../apama-installer
            unzip -q apama-installer.zip
            #cp apama-installer.zip $APAMA_CACHE_TAR
            mv apama_*/* ./
            
            cat > apama-installer-script.txt << EOF
          LicenseAgree=Accept
          InstallProducts=e2ei/11/.latest/Apama/PAMServer
          PAM.Work.Directory.ID=__VERSION1__,$_SAG_INSTALL_PATH/apama-work
          InstallDir=$_SAG_INSTALL_PATH
          sagInstallerLogFile=softwareag-installer.log
          imageFile=data/SAGImage.zip
          EOF
            # Need to escape backslashes as it's effectively a properties file
            sed -i 's/\\/\\\\/g' apama-installer-script.txt
            
            echo Running installer with script:
            cat apama-installer-script.txt
            
            ./install -readScript apama-installer-script.txt -console -scriptErrorInteract no
            
            # Double-check that it was installed
            ls $_SAG_INSTALL_PATH/Apama/bin > /dev/null
            
            # Archive a pristine copy of the installation for the cache (before running any tests); 
            # no need to compress as the cache already does that
            cd $_SAG_INSTALL_PATH
            tar -cf $APAMA_CACHE_TAR *
            #touch `pwd`/cached-apama-installation.tar

            
            echo TODO - contents of ~ are:
            ls ~
            echo ---
            ls -l $APAMA_CACHE_TAR
          fi

